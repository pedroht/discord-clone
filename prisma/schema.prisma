generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String @id @default(uuid())
  user_id   String @unique
  name      String
  image_url String @db.Text
  email     String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]

  @@map("profiles")
}

model Server {
  id          String @id @default(uuid())
  name        String
  image_url   String @db.Text
  invite_code String @unique

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([profile_id])
  @@map("servers")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  server_id String
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([profile_id])
  @@index([server_id])
  @@map("members")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  server_id String
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([server_id])
  @@index([profile_id])
  @@map("channels")
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  member_id String
  member    Member @relation(fields: [member_id], references: [id], onDelete: Cascade)

  channel_id String
  channel    Channel @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([member_id])
  @@index([channel_id])
  @@map("messages")
}
